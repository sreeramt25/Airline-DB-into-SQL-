-- ü™ë Find the seat number which is least allocated among all the seats
WITH t1 AS (
    SELECT seat_no, COUNT(seat_no) AS count_seat, 
           DENSE_RANK() OVER (ORDER BY COUNT(seat_no)) AS RA
    FROM BOARDING_PASSES
    GROUP BY seat_no
)
SELECT seat_no
FROM t1
WHERE RA = 1;

-- üí∏ Month wise highest paying passenger name and passenger id
WITH table1 AS (
    SELECT TO_CHAR(book_date, 'mmm-yy') AS Month_name, 
           passenger_id, passenger_name, total_amount,
           RANK() OVER (PARTITION BY TO_CHAR(book_date, 'mmm-yy') 
                        ORDER BY total_amount DESC) AS highest_paying
    FROM BOOKINGS B
    JOIN TICKETS T ON B.book_ref = T.book_ref
)
SELECT Month_name, passenger_id, passenger_name, total_amount
FROM table1
WHERE highest_paying = 1
ORDER BY Month_name;

-- üí∞ Month wise least paying passenger name and passenger id
WITH table1 AS (
    SELECT TO_CHAR(book_date, 'mmm-yy') AS Month_name, 
           passenger_id, passenger_name, total_amount,
           RANK() OVER (PARTITION BY TO_CHAR(book_date, 'mmm-yy') 
                        ORDER BY total_amount ASC) AS lowest_paying
    FROM BOOKINGS B
    JOIN TICKETS T ON B.book_ref = T.book_ref
)
SELECT Month_name, passenger_id, passenger_name, total_amount
FROM table1
WHERE lowest_paying = 1
ORDER BY Month_name;

-- üõ´ Travel details of non-stop journeys or return journeys (having more than 1 flight)
SELECT passenger_id, passenger_name, T.ticket_no, COUNT(flight_id) AS return_flight
FROM TICKETS T
JOIN TICKET_FLIGHTS TF ON T.ticket_no = TF.ticket_no
GROUP BY passenger_id, passenger_name, T.ticket_no
HAVING COUNT(flight_id) > 1;

-- üéüÔ∏è Count of tickets without boarding passes
SELECT COUNT(T.ticket_no)
FROM TICKETS T
LEFT JOIN BOARDING_PASSES BP ON T.ticket_no = BP.ticket_no
WHERE BP.boarding_no IS NULL;

-- ‚úàÔ∏è Details of the longest flight
WITH table1 AS (
    SELECT flight_no, departure_airport, arrival_airport, aircraft_code,
           EXTRACT(EPOCH FROM (scheduled_arrival - scheduled_departure)) / 60 AS duration_in_min
    FROM flights
)
SELECT DISTINCT *
FROM table1
WHERE duration_in_min = (
    SELECT MAX(duration_in_min)
    FROM table1
);

-- üåÖ Details of all the morning flights (6AM to 11AM)
SELECT flight_id, flight_no, departure_airport, scheduled_departure, scheduled_arrival,
       CASE WHEN EXTRACT(HOUR FROM scheduled_departure) >= 6 
            AND EXTRACT(HOUR FROM scheduled_departure) < 12 THEN 'Morning' 
       END AS timings
FROM flights
WHERE EXTRACT(HOUR FROM scheduled_departure) >= 6 
  AND EXTRACT(HOUR FROM scheduled_departure) < 11;

-- üïë The earliest morning flight available from every airport
WITH RankedFlights AS (
    SELECT flight_id, flight_no, scheduled_departure, scheduled_arrival, departure_airport,
           CASE WHEN EXTRACT(HOUR FROM scheduled_departure) >= 2 
                AND EXTRACT(HOUR FROM scheduled_departure) < 6 THEN 'Morning' 
           END AS Timings,
           DENSE_RANK() OVER (PARTITION BY departure_airport 
                               ORDER BY scheduled_departure) AS flight_rank
    FROM flights
    WHERE EXTRACT(HOUR FROM scheduled_departure) >= 2 
      AND EXTRACT(HOUR FROM scheduled_departure) < 6
)
SELECT flight_id, flight_no, scheduled_departure, scheduled_arrival, departure_airport, Timings
FROM RankedFlights
WHERE flight_rank = 1;

-- üåç List of airport codes in Europe/Moscow timezone
SELECT DISTINCT airport_code
FROM AIRPORTS
WHERE timezone = 'Europe/Moscow';

-- üöÄ Count of seats in various fare conditions for every aircraft code
SELECT DISTINCT aircraft_code, fare_conditions, COUNT(seat_no) AS seat_count
FROM SEATS
GROUP BY aircraft_code, fare_conditions;

-- üè∑Ô∏è Count of aircraft codes with at least one Business class seat
SELECT COUNT(DISTINCT aircraft_code)
FROM SEATS
WHERE fare_conditions = 'Business';

-- ‚úàÔ∏è Airport with the maximum number of departure flights
WITH table_1 AS (
    SELECT airport_name, COUNT(flight_no) AS flight_count,
           RANK() OVER (ORDER BY COUNT(flight_no) DESC) AS departure_rank
    FROM AIRPORTS A
    JOIN FLIGHTS F ON A.airport_code = F.departure_airport
    GROUP BY airport_name
)
SELECT airport_name
FROM table_1
WHERE departure_rank = 1;

-- üèôÔ∏è Airport with the least number of scheduled departure flights
WITH table_1 AS (
    SELECT airport_name, COUNT(flight_no) AS flight_count,
           RANK() OVER (ORDER BY COUNT(flight_no) ASC) AS departure_rank
    FROM AIRPORTS A
    JOIN FLIGHTS F ON A.airport_code = F.departure_airport
    GROUP BY airport_name
)
SELECT airport_name
FROM table_1
WHERE departure_rank = 1;

-- üõë Count of flights from 'DME' airport that don‚Äôt have an actual departure
SELECT COUNT(DISTINCT flight_no)
FROM FLIGHTS
WHERE departure_airport = 'DME' 
  AND actual_departure IS NULL;

-- üìè Identify flight IDs with range between 3000 and 6000
SELECT DISTINCT flight_no, F.aircraft_code, range
FROM AIRCRAFTS A
JOIN FLIGHTS F ON A.aircraft_code = F.aircraft_code
WHERE range BETWEEN 3000 AND 6000;

-- üîÑ Count of flights flying between URS and KUF
SELECT COUNT(DISTINCT flight_no)
FROM FLIGHTS
WHERE (departure_airport = 'KUF' AND arrival_airport = 'URS') 
   OR (departure_airport = 'URS' AND arrival_airport = 'KUF');

-- ‚úàÔ∏è Count of flights flying from either NOZ or KRR
SELECT COUNT(DISTINCT flight_no)
FROM FLIGHTS
WHERE departure_airport IN ('NOZ', 'KRR');

-- üõ´ Count of flights flying from specific airports
SELECT departure_airport, COUNT(DISTINCT flight_no) AS count_flight
FROM FLIGHTS
WHERE departure_airport IN ('KZN', 'DME', 'NBC', 'NJC', 'GDX', 'SGC', 'VKO', 'ROV')
GROUP BY departure_airport;

-- ‚úàÔ∏è Flight details with range between 3000 and 6000 and flying from DME
SELECT DISTINCT flight_no, F.aircraft_code, range, departure_airport
FROM FLIGHTS F
JOIN AIRCRAFTS A ON F.aircraft_code = A.aircraft_code
WHERE range BETWEEN 3000 AND 6000 
  AND departure_airport = 'DME';

-- üõ©Ô∏è Flight IDs using Airbus aircrafts that got cancelled or delayed
WITH t1 AS (
    SELECT flight_id, model::json->>'en' AS aircraft_Model, status
    FROM FLIGHTS F
    JOIN AIRCRAFTS A ON F.aircraft_code = A.aircraft_code
)
SELECT flight_id, aircraft_Model
FROM t1
WHERE aircraft_Model LIKE '%Airbus%'
  AND status IN ('Cancelled', 'Delayed');

-- üõ©Ô∏è Flight IDs using Boeing aircrafts that got cancelled or delayed
WITH t1 AS (
    SELECT flight_id, model::json->>'en' AS aircraft_Model, status
    FROM FLIGHTS F
    JOIN AIRCRAFTS A ON F.aircraft_code = A.aircraft_code
)
SELECT flight_id, aircraft_Model
FROM t1
WHERE aircraft_Model LIKE '%Boeing%'
  AND status IN ('Cancelled', 'Delayed');

-- üõ¨ Airport with the most cancelled flights (arriving)
WITH t1 AS (
    SELECT airport_name::json->>'en' AS Airport_name,
           DENSE_RANK() OVER (ORDER BY COUNT(*) DESC) AS RA
    FROM AIRPORTS A
    JOIN FLIGHTS F ON A.airport_code = F.arrival_airport
    WHERE status = 'Cancelled'
    GROUP BY airport_name
)
SELECT Airport_name
FROM t1
WHERE RA = 1;

-- üõ©Ô∏è Flight IDs using Airbus aircrafts
WITH t1 AS (
    SELECT flight_id, model::json->>'en' AS aircraft_model
    FROM FLIGHTS F
    JOIN AIRCRAFTS A ON F.aircraft_code = A.aircraft_code
)
SELECT flight_id, aircraft_model
FROM t1
WHERE aircraft_model LIKE '%Airbus%';

-- üìÖ Date-wise last flight ID flying from every airport
WITH date_wise AS (
    SELECT flight_id, flight_no, scheduled_departure, departure_airport,
           DENSE_RANK() OVER (PARTITION BY departure_airport 
                               ORDER BY scheduled_departure DESC) AS RA
    FROM FLIGHTS
)
SELECT flight_id, flight_no, scheduled_departure, departure_airport
FROM date_wise
WHERE RA = 1;

-- üíµ List of customers who will get a refund due to flight cancellations and the refund amount
SELECT passenger_name, SUM(amount) AS total_refund
FROM FLIGHTS F
JOIN TICKET_FLIGHTS TF ON F.flight_no = TF.flight_no
JOIN BOOKINGS B ON TF.book_ref = B.book_ref
JOIN TICKETS T ON B.book_ref = T.book_ref
WHERE F.status = 'Cancelled'
GROUP BY passenger_name;

-- üé´ Count of booked seats for all flights
SELECT COUNT(seat_no)
FROM BOARDING_PASSES;

-- ‚úàÔ∏è The total amount of refunds to be given
SELECT SUM(amount) AS total_refund
FROM REFUNDS;

-- üìÖ Identify date-wise first cancelled flight ID flying for every airport
WITH date_wise AS (
    SELECT flight_id, flight_no, scheduled_departure, departure_airport,
           DENSE_RANK() OVER (PARTITION BY departure_airport 
                               ORDER BY scheduled_departure ASC) AS RA
    FROM FLIGHTS
    WHERE status = 'Cancelled'
)
SELECT flight_id, flight_no, scheduled_departure, departure_airport
FROM date_wise
WHERE RA = 1;

-- ‚úàÔ∏è Identify list of Airbus flight IDs which got cancelled
SELECT flight_id 
FROM FLIGHTS F 
JOIN AIRCRAFTS A ON F.aircraft_code = A.aircraft_code
WHERE model LIKE '%Airbus%'
  AND status = 'Cancelled';

-- üöÄ Identify list of flight IDs having highest range
SELECT flight_id, range 
FROM FLIGHTS F 
JOIN AIRCRAFTS A ON F.aircraft_code = A.aircraft_code
ORDER BY range DESC
LIMIT 1;
